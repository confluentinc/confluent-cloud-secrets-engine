.SECONDEXPANSION:

# Include this file last
.PHONY: init-ci
## Target for CI to setup environment
init-ci: $$(INIT_CI_TARGETS)

RELEASE_PRECOMMIT ?=
# First thing to do on pre release is check if the repo is clean according to git
RELEASE_PRECOMMIT := pre-release-check $(RELEASE_PRECOMMIT)

RELEASE_POSTCOMMIT ?= $(RELEASE_TARGETS) # set to RELEASE_TARGETS for backwards compatibility
ifeq ($(MAVEN_NANO_VERSION), true)
RELEASE_TARGETS := $(RELEASE_PRECOMMIT) tag-release $(RELEASE_POSTCOMMIT)
else
RELEASE_TARGETS := $(RELEASE_PRECOMMIT) get-release-image commit-release tag-release $(RELEASE_POSTCOMMIT)
endif
.PHONY: release
## Release Project.  See show-args to see what will run
release: $$(RELEASE_TARGETS)
ifneq ($(RELEASE_MAKE_TARGETS),)
	. $(MK_INCLUDE_BIN)/vault-setup
	$(MAKE) $(MAKE_ARGS) $(RELEASE_MAKE_TARGETS)
endif

.PHONY: release-ci
## Target for CI to run to release
release-ci:
ifeq ($(CI),true)
ifneq ($(RELEASE_BRANCH),$(_empty))
	$(MAKE) $(MAKE_ARGS) release
else ifeq ($(CI_TEST), true)
	$(MAKE) $(MAKE_ARGS) release
endif
# auto merge if it is a mk-include auto update
ifeq ($(TRIGGER_PR),false)
ifeq ($(UPDATE_MK_INCLUDE_AUTO_MERGE),true)
	$(MAKE) auto-merge
endif
endif
# merge as admin if it is a servicebot auto update generated by Jenkins
ifeq ($(SEMAPHORE_GIT_PR_BRANCH),chore-service-bot-update)
	$(MAKE) merge-servicebot-pr
endif
else
	true
endif

.PHONY: pre-release-check
pre-release-check:
	git diff --exit-code || (echo "ERROR: the repo is not supposed to have local dirty changes prior to releasing" && git status && exit 1)

.PHONY: auto-merge
auto-merge:
ifeq ($(CI),true)
	$(GH) repo edit  --enable-auto-merge
	$(GH) pr merge $(SEMAPHORE_GIT_PR_BRANCH) --squash --auto || $(GH) pr merge $(SEMAPHORE_GIT_BRANCH) --squash --auto
endif

.PHONY: merge-servicebot-pr
merge-servicebot-pr:
	$(eval authors := $(shell $(GH) pr view $(SEMAPHORE_GIT_PR_BRANCH) --json author --jq .author.login))
	if [[ "$(authors)" = "ConfluentTools" ]]; then \
		$(GH) pr review $(SEMAPHORE_GIT_PR_BRANCH) --approve; \
		$(GH) pr review $(SEMAPHORE_GIT_PR_BRANCH) --comment --body "Will merge servicebot PR if CI passes"; \
		$(GH) pr merge $(SEMAPHORE_GIT_PR_BRANCH) --squash --auto; \
	fi

.PHONY: generate
## Generate code for the project. See show-args to see what will run
generate: $$(GENERATE_TARGETS)

.PHONY: build
## Build Project.  See show-args to see what will run
build: $$(BUILD_TARGETS)

.PHONY: test
## Test Project.  See show-args to see what will run
# Note: we keep the old target dependencies for now, since service can have overrides, e.g. TEST_TARGETS += foobar
# We run tests in order, from the least expensive unit tests to the more expensive e2e tests.
#
# You may see language-specific dependencies in other makefiles, e.g.:
#
# test-pyramid-pre-steps: <language-specific target>
# test-pyramid-code-quality: <language-specific target>
# test-pyramid-unit-tests: <language-specific target>
# test-pyramid-component-tests: <language-specific target>
# test-pyramid-local-mode-tests: <language-specific target>
# test-pyramid-contract-tests: <language-specific target>
# test-pyramid-integration-tests: <language-specific target>
# test-pyramid-e2e-tests: <language-specific target>
# test-pyramid-post-steps: <language-specific target>

test:
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "pre steps"
	$(MAKE) $(MAKE_ARGS) test-pyramid-pre-steps
ifneq ($(PRE_TEST_TARGETS),$(_empty))
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "(deprecated) PRE_TEST_TARGETS"
	$(MAKE) $(MAKE_ARGS) $(PRE_TEST_TARGETS)
endif
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "code quality targets"
	$(MAKE) $(MAKE_ARGS) test-pyramid-code-quality
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "unit tests"
	$(MAKE) $(MAKE_ARGS) test-pyramid-unit-tests
ifneq ($(TEST_TARGETS),$(_empty))
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "(deprecated) TEST_TARGETS"
	$(MAKE) $(MAKE_ARGS) $(TEST_TARGETS)
endif
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "local mode tests"
	$(MAKE) $(MAKE_ARGS) test-pyramid-local-mode-tests
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "component tests"
	$(MAKE) $(MAKE_ARGS) test-pyramid-component-tests
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "contract tests"
	$(MAKE) $(MAKE_ARGS) test-pyramid-contract-tests
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "integration tests"
	$(MAKE) $(MAKE_ARGS) test-pyramid-integration-tests
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "end-to-end tests"
	$(MAKE) $(MAKE_ARGS) test-pyramid-e2e-tests
	@$(MK_INCLUDE_BIN)/pyramid-header.sh "post steps"
	$(MAKE) $(MAKE_ARGS) test-pyramid-post-steps

.PHONY: test-pyramid-pre-steps
## Test Project - run steps before tests, e.g. install tools.
test-pyramid-pre-steps:

.PHONY: test-pyramid-code-quality
## Test Project - run code quality and linter targets
test-pyramid-code-quality:

.PHONY: test-pyramid-unit-tests
## Test Project - run unit tests
test-pyramid-unit-tests:

.PHONY: test-pyramid-local-mode-tests
## Test Project - run local mode tests
test-pyramid-local-mode-tests:

.PHONY: test-pyramid-component-tests
## Test Project - run component tests
test-pyramid-component-tests:

.PHONY: test-pyramid-contract-tests
## Test Project - run contract tests
test-pyramid-contract-tests:

.PHONY: test-pyramid-integration-tests
## Test Project - run integration tests
test-pyramid-integration-tests:

.PHONY: test-pyramid-e2e-tests
## Test Project - run e2e tests
test-pyramid-e2e-tests:

.PHONY: test-pyramid-post-steps
## Test Project - run steps after tests.
test-pyramid-post-steps:

.PHONY: test-synthetic
## Synthetically Test Project.  See show-args to see what will run
## Can run tests in PROD, DO NOT use to run system tests
test-synthetic: $$(SYNTHETIC_TEST_TARGETS)

.PHONY: clean
## Clean Project.  See show-args to see what will run
clean: $$(CLEAN_TARGETS)

.PHONY: epilogue-ci
## Epilogue (post-build steps for CI).  See show-args to see what will run
epilogue-ci:
ifeq ($(CI),true)
	$(MAKE) $(MAKE_ARGS) $(EPILOGUE_TARGETS)
endif

.PHONY: show-args
## Show what common targets will run.
show-args:
	@echo "INIT_CI_TARGETS:        $(INIT_CI_TARGETS)"
	@echo "CLEAN_TARGETS:          $(CLEAN_TARGETS)"
	@echo "GENERATE_TARGETS:       $(GENERATE_TARGETS)"
	@echo "BUILD_TARGETS:          $(BUILD_TARGETS)"
	@echo "PRE_TEST_TARGETS:       $(PRE_TEST_TARGETS)"
	@echo "TEST_TARGETS:           $(TEST_TARGETS)"
	@echo "SYNTHETIC_TEST_TARGETS: $(SYNTHETIC_TEST_TARGETS)"
	@echo "RELEASE_TARGETS:        $(RELEASE_TARGETS)"
	@echo "RELEASE_MAKE_TARGETS:   $(RELEASE_MAKE_TARGETS)"
	@echo "EPILOGUE_TARGETS:       $(EPILOGUE_TARGETS)"
	@echo "CI_BIN:                 $(CI_BIN)"
	@echo "BIN_PATH:               $(BIN_PATH)"
	@echo "HOST_OS:                $(HOST_OS)"
	@echo "GIT_ROOT:               $(GIT_ROOT)"

.DEFAULT_GOAL := help
.PHONY: help
## Show this help
help:
	@echo "$$(tput bold)Available rules:$$(tput sgr0)"
	@echo
	@sed -n -e "/^## / { \
		h; \
		s/.*//; \
		:doc" \
		-e "H; \
		n; \
		s/^## //; \
		t doc" \
		-e "s/:.*//; \
		G; \
		s/\\n## /---/; \
		s/\\n/ /g; \
		p; \
	}" ${MAKEFILE_LIST} \
	| LC_ALL='C' sort --ignore-case \
	| awk -F '---' \
		-v ncol=$$(tput cols) \
		-v indent=19 \
		-v col_on="$$(tput setaf 6)" \
		-v col_off="$$(tput sgr0)" \
	'{ \
		printf "%s%*s%s ", col_on, -indent, $$1, col_off; \
		n = split($$2, words, " "); \
		line_length = ncol - indent; \
		for (i = 1; i <= n; i++) { \
			line_length -= length(words[i]) + 1; \
			if (line_length <= 0) { \
				line_length = ncol - indent - length(words[i]) - 1; \
				printf "\n%*s ", -indent, " "; \
			} \
			printf "%s ", words[i]; \
		} \
		printf "\n"; \
	}' \
	| more $(shell test $(shell uname) = Darwin && echo '--no-init --raw-control-chars')
